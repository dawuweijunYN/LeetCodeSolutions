"""X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X.  Each digit must be rotated - we cannot choose to leave it alone.A number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other; 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid.Now given a positive number N, how many numbers X from 1 to N are good?Example:Input: 10Output: 4Explanation:There are four good numbers in the range [1, 10] : 2, 5, 6, 9.Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.Note:N  will be in range [1, 10000]."""class Solution(object):    def rotatedDigits(self, N):        """        :type N: int        :rtype: int        """        same = [1, 2, 2, 2, 2, 2, 2, 2, 3, 3]        diff = [0, 0, 1, 1, 1, 2, 3, 3, 3, 4]        def calc(num):            if len(num) == 1:                return same[int(num)], diff[int(num)]            lead = int(num[0])            if lead == 0:                return calc(num[1:])            else:                n_s, n_d = calc('9' * (len(num) - 1))                nxt_same, nxt_diff = calc(num[1:])                s = same[lead - 1] * n_s                if lead in [0, 1, 8]:                    s += nxt_same                d = (same[lead - 1] + diff[lead - 1]) * n_d + diff[lead - 1] * n_s                if lead in [0, 1, 8]:                    d += nxt_diff                if lead in [2, 5, 6, 9]:                    d += nxt_diff + nxt_same                return s, d        return calc(str(N))[1]