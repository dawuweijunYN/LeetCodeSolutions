"""Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).For example:Given binary tree [3,9,20,null,null,15,7],    3   / \  9  20    /  \   15   7return its bottom-up level order traversal as:[  [15,7],  [9,20],  [3]]"""# Definition for a binary tree node.# class TreeNode(object):#     def __init__(self, x):#         self.val = x#         self.left = None#         self.right = Noneclass Solution(object):    def levelOrderBottom(self, root):        """        :type root: TreeNode        :rtype: List[List[int]]        """        if not root: return []        tree=[root]        res=[]        dept=0        hasSubTree=True        while hasSubTree:            temp=[]            hasSubTree=False            res.append([])            for i in tree:                res[-1].append(i.val)                if i.left:                    temp.append(i.left)                    hasSubTree=True                if i.right:                    temp.append(i.right)                    hasSubTree=True            tree=temp        res.reverse()        return res