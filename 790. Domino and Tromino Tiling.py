"""We have two types of tiles: a 2x1 domino shape, and an "L" tromino shape. These shapes may be rotated.XX  <- dominoXX  <- "L" trominoXGiven N, how many ways are there to tile a 2 x N board? Return your answer modulo 10^9 + 7.(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)Example:Input: 3Output: 5Explanation:The five different ways are listed below, different letters indicates different tiles:XYZ XXZ XYY XXY XYYXYZ YYZ XZZ XYY XXYNote:N  will be in range [1, 1000]."""class Solution:    def numTilings(self, N):        """        :type N: int        :rtype: int        """        MOD = 10 ** 9 + 7        dp = [1, 0, 0, 0]        for _ in range(N):            ndp = [0, 0, 0, 0]            ndp[0b00] = (dp[0b00] + dp[0b11]) % MOD            ndp[0b01] = (dp[0b00] + dp[0b10]) % MOD            ndp[0b10] = (dp[0b00] + dp[0b01]) % MOD            ndp[0b11] = (dp[0b00] + dp[0b01] + dp[0b10]) % MOD            dp = ndp        return dp[0]